{"id":"../node_modules/model/lib/query/comparison.js","dependencies":[{"name":"E:\\Books\\JavaScript\\js_constructor\\package.json","includedInParent":true,"mtime":1613955421658},{"name":"E:\\Books\\JavaScript\\js_constructor\\node_modules\\model\\package.json","includedInParent":true,"mtime":1406614599000},{"name":"utilities","loc":{"line":1,"column":20},"parent":"E:\\Books\\JavaScript\\js_constructor\\node_modules\\model\\lib\\query\\comparison.js","resolved":"E:\\Books\\JavaScript\\js_constructor\\node_modules\\utilities\\lib\\index.js"},{"name":"../datatypes","loc":{"line":2,"column":24},"parent":"E:\\Books\\JavaScript\\js_constructor\\node_modules\\model\\lib\\query\\comparison.js","resolved":"E:\\Books\\JavaScript\\js_constructor\\node_modules\\model\\lib\\datatypes.js"}],"generated":{"js":"var utils = require('utilities')\n  , datatypes = require('../datatypes')\n  , comparison = {}\n  , ComparisonBase\n  , comparisonTypes\n  , _validateForDatatype;\n\n_validateForDatatype = function (val) {\n  var validator = datatypes[this.datatype].validate\n    , validated = validator(this.field, val, {});\n  return !validated.err;\n};\n\ncomparison.create = function () {\n  var args = Array.prototype.slice.call(arguments)\n    , type = args.shift()\n    , ctor = utils.string.capitalize(type) + 'Comparison'\n    , inst;\n\n    ctor = comparisonTypes[ctor];\n    inst = new ctor();\n    inst.type = type;\n    inst.initialize.apply(inst, args);\n    return inst;\n};\n\nComparisonBase = function () {\n  this.initialize = function (model, field, value, datatype, opts) {\n    this.parent = null;\n    this.descendants = [];\n    // FIXME: Should use Property objects\n    this.model = model;\n    this.field = field;\n    this.value = value;\n    this.datatype = datatype;\n    this.opts = opts || {};\n  };\n\n  // Most basic validation is to check that the value for the\n  // comparison is actually valid for this field\n  this.isValid = function () {\n    return _validateForDatatype.apply(this, [this.value]);\n  };\n};\n\ncomparisonTypes = {\n  EqualToComparison: function () {\n    this.jsComparatorString = '==';\n    this.sqlComparatorString = '=';\n  }\n\n, NotEqualToComparison: function () {\n    this.jsComparatorString = '!=';\n    this.sqlComparatorString = '!=';\n  }\n\n, GreaterThanComparison: function () {\n    this.jsComparatorString = '>';\n    this.sqlComparatorString = '>';\n  }\n\n, LessThanComparison: function () {\n    this.jsComparatorString = '<';\n    this.sqlComparatorString = '<';\n  }\n\n, GreaterThanOrEqualComparison: function () {\n    this.jsComparatorString = '>=';\n    this.sqlComparatorString = '>=';\n  }\n\n, LessThanOrEqualComparison: function () {\n    this.jsComparatorString = '<=';\n    this.sqlComparatorString = '<=';\n  }\n\n, InclusionComparison: function () {\n    this.sqlComparatorString = 'IN';\n\n    this.isValid = function () {\n      var self = this\n        , val = this.value;\n      if (!Array.isArray(val)) {\n        return false;\n      }\n      return val.every(function (item) {\n        return _validateForDatatype.apply(self, [item]);\n      });\n    };\n  }\n\n, LikeComparison: function () {\n    this.sqlComparatorString = 'LIKE';\n\n    this.isValid = function () {\n      if (!(this.datatype == 'string' || this.datatype == 'text')) {\n        return false;\n      }\n      return this.constructor.prototype.isValid.call(this);\n    };\n  }\n\n};\n\n(function () {\n  var ctor;\n  for (var t in comparisonTypes) {\n    ctor = comparisonTypes[t];\n    ctor.prototype = new ComparisonBase();\n    ctor.prototype.constructor = ctor;\n  }\n})();\n\n// Export the specific constructors as well as the `create` function\nutils.mixin(comparison, comparisonTypes);\n\nmodule.exports = comparison;\n\n\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/model/lib/query/comparison.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}}],"sources":{"../node_modules/model/lib/query/comparison.js":"var utils = require('utilities')\n  , datatypes = require('../datatypes')\n  , comparison = {}\n  , ComparisonBase\n  , comparisonTypes\n  , _validateForDatatype;\n\n_validateForDatatype = function (val) {\n  var validator = datatypes[this.datatype].validate\n    , validated = validator(this.field, val, {});\n  return !validated.err;\n};\n\ncomparison.create = function () {\n  var args = Array.prototype.slice.call(arguments)\n    , type = args.shift()\n    , ctor = utils.string.capitalize(type) + 'Comparison'\n    , inst;\n\n    ctor = comparisonTypes[ctor];\n    inst = new ctor();\n    inst.type = type;\n    inst.initialize.apply(inst, args);\n    return inst;\n};\n\nComparisonBase = function () {\n  this.initialize = function (model, field, value, datatype, opts) {\n    this.parent = null;\n    this.descendants = [];\n    // FIXME: Should use Property objects\n    this.model = model;\n    this.field = field;\n    this.value = value;\n    this.datatype = datatype;\n    this.opts = opts || {};\n  };\n\n  // Most basic validation is to check that the value for the\n  // comparison is actually valid for this field\n  this.isValid = function () {\n    return _validateForDatatype.apply(this, [this.value]);\n  };\n};\n\ncomparisonTypes = {\n  EqualToComparison: function () {\n    this.jsComparatorString = '==';\n    this.sqlComparatorString = '=';\n  }\n\n, NotEqualToComparison: function () {\n    this.jsComparatorString = '!=';\n    this.sqlComparatorString = '!=';\n  }\n\n, GreaterThanComparison: function () {\n    this.jsComparatorString = '>';\n    this.sqlComparatorString = '>';\n  }\n\n, LessThanComparison: function () {\n    this.jsComparatorString = '<';\n    this.sqlComparatorString = '<';\n  }\n\n, GreaterThanOrEqualComparison: function () {\n    this.jsComparatorString = '>=';\n    this.sqlComparatorString = '>=';\n  }\n\n, LessThanOrEqualComparison: function () {\n    this.jsComparatorString = '<=';\n    this.sqlComparatorString = '<=';\n  }\n\n, InclusionComparison: function () {\n    this.sqlComparatorString = 'IN';\n\n    this.isValid = function () {\n      var self = this\n        , val = this.value;\n      if (!Array.isArray(val)) {\n        return false;\n      }\n      return val.every(function (item) {\n        return _validateForDatatype.apply(self, [item]);\n      });\n    };\n  }\n\n, LikeComparison: function () {\n    this.sqlComparatorString = 'LIKE';\n\n    this.isValid = function () {\n      if (!(this.datatype == 'string' || this.datatype == 'text')) {\n        return false;\n      }\n      return this.constructor.prototype.isValid.call(this);\n    };\n  }\n\n};\n\n(function () {\n  var ctor;\n  for (var t in comparisonTypes) {\n    ctor = comparisonTypes[t];\n    ctor.prototype = new ComparisonBase();\n    ctor.prototype.constructor = ctor;\n  }\n})();\n\n// Export the specific constructors as well as the `create` function\nutils.mixin(comparison, comparisonTypes);\n\nmodule.exports = comparison;\n\n\n"},"lineCount":120}},"error":null,"hash":"525e3fa216f49dd2f2fc0b4be6e169dc","cacheData":{"env":{}}}