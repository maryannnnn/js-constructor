{"id":"../node_modules/model/lib/query/query.js","dependencies":[{"name":"E:\\Books\\JavaScript\\js_constructor\\package.json","includedInParent":true,"mtime":1613955421658},{"name":"E:\\Books\\JavaScript\\js_constructor\\node_modules\\model\\package.json","includedInParent":true,"mtime":1406614599000},{"name":"utilities","loc":{"line":4,"column":20},"parent":"E:\\Books\\JavaScript\\js_constructor\\node_modules\\model\\lib\\query\\query.js","resolved":"E:\\Books\\JavaScript\\js_constructor\\node_modules\\utilities\\lib\\index.js"},{"name":"../index","loc":{"line":5,"column":20},"parent":"E:\\Books\\JavaScript\\js_constructor\\node_modules\\model\\lib\\query\\query.js","resolved":"E:\\Books\\JavaScript\\js_constructor\\node_modules\\model\\lib\\index.js"},{"name":"./operation","loc":{"line":6,"column":24},"parent":"E:\\Books\\JavaScript\\js_constructor\\node_modules\\model\\lib\\query\\query.js","resolved":"E:\\Books\\JavaScript\\js_constructor\\node_modules\\model\\lib\\query\\operation.js"},{"name":"./comparison","loc":{"line":7,"column":25},"parent":"E:\\Books\\JavaScript\\js_constructor\\node_modules\\model\\lib\\query\\query.js","resolved":"E:\\Books\\JavaScript\\js_constructor\\node_modules\\model\\lib\\query\\comparison.js"}],"generated":{"js":"\nvar query = {}\n  , Query\n  , utils = require('utilities')\n  , model = require('../index')\n  , operation = require('./operation')\n  , comparison = require('./comparison');\n\nQuery = function (model, conditions, options) {\n  this.model = null;\n  this.conditions = null;\n  this.initialize.apply(this, arguments);\n};\n\nQuery.comparisonTypes = {\n  'eql': 'EqualTo'\n, 'ne': 'NotEqualTo'\n, 'in': 'Inclusion'\n, 'like': 'Like'\n, 'gt': 'GreaterThan'\n, 'lt': 'LessThan'\n, 'gte': 'GreaterThanOrEqual'\n, 'lte': 'LessThanOrEqual'\n};\n\nQuery.prototype = new (function () {\n\n  var _operationTypes = {\n        'and': true\n      , 'or': true\n      , 'not': true\n      , 'null': true\n      }\n\n    , _isQueryObject = function (obj) {\n        // Just generic query object -- not null, Date, or Boolean, or Array\n        return (obj && typeof obj == 'object' && !(obj instanceof Date) &&\n            !(obj instanceof Boolean) && !Array.isArray(obj));\n      }\n\n    , _extractComparisonType = function (obj) {\n        // Just generic query object -- not null, Date, or Boolean\n        if (_isQueryObject(obj)) {\n          // Return any valid comparison type used as key\n          for (var p in obj) {\n            if (Query.comparisonTypes[p]) {\n              return p;\n            }\n          }\n        }\n      }\n\n    , _createFieldValidator = function () {\n        var self = this\n          , baseProps = {\n              id: true\n            , createdAt: true\n            , updatedAt: true\n            };\n        return function (k) {\n          var keyName = k\n            , keyNameArr\n            , modelName\n            , reg\n            , assnTokens = [];\n\n          // Users.loginId, Teams.name\n          // Sort on nested association property\n          modelName = self.model.modelName\n\n          // Walks through the associations and updates modelName\n          // until we reach the property name\n          if (keyName.indexOf('.') > -1) {\n            if(self.opts != null && self.opts.limit != null) {\n              throw new Error('It is not possible to query on an association when there is a limit clause')\n            }\n\n            keyNameArr = keyName.split('.');\n\n            while(keyNameArr.length > 1) {\n              var tempAssnName = keyNameArr.shift()\n                , assn = model.getAssociation(modelName, tempAssnName)\n\n              assnTokens.push(tempAssnName)\n\n              if(!assn) {\n                throw new Error('The association \"' + tempAssnName + '\" is not a valid ' +\n                                'property on the ' + modelName + ' model.');\n              }\n              else {\n                modelName = assn.model\n              }\n            }\n\n            keyName = keyNameArr[0]\n          }\n\n          reg = model.descriptionRegistry[modelName].properties;\n\n          if (baseProps[keyName] || reg[keyName]) {\n            return {\n              modelName: modelName\n            , propertyName: keyName\n            , assnTokens: assnTokens\n            };\n          }\n          else {\n            return null;\n          }\n        };\n      }\n\n    , _createOperation = function (conditions, key) {\n        var self = this\n          , type = key || 'and'\n          , cond\n          , item\n          , op = operation.create(type)\n          , notOperand\n          , operand\n          , keys;\n\n        // TODO: Handle associations\n        for (var k in conditions) {\n          cond = conditions[k];\n\n          // Operation type, can contain other operations/conditions\n          if (_operationTypes[k]) {\n            // Base operation-type to create: if the type is a 'not',\n            // create a single 'and' with the same conditions to wrap\n            // in a 'not'\n            type = k == 'not' ? 'and' : k;\n\n            // If the conditions are an array, create a single 'and'\n            // op that wraps each set of conditions in each item, and\n            // add to the wrapper\n            if (Array.isArray(cond)) {\n              // Create empty wrapper\n              operand = operation.create(type);\n              cond.forEach(function (c) {\n                operand.add(_createOperation.apply(self, [c, 'and']));\n              });\n            }\n            // Simple object-literal, just create an operation\n            else {\n              operand = _createOperation.apply(this, [cond, type]);\n            }\n\n            // If this was a 'not' operation, create a wrapping 'not'\n            // to contain the single operation created\n            if (k == 'not') {\n              notOperand = operation.create(k);\n              notOperand.add(operand);\n              operand = notOperand;\n            }\n          }\n          // Condition, may be leaf-node or multiple comparisions\n          // ANDed on the same field\n          else {\n            // Exclude null, exclude array-values, only consider actual objects\n            if (_isQueryObject(cond)) {\n              keys = Object.keys(cond);\n            }\n            // If there are multiple keys, means it's multiple comparisons on\n            // the same field\n            if (keys && keys.length > 1) {\n              // Create wrapper operation\n              operand = operation.create('and');\n              // Go through each of the comparision keys in the object\n              // and create single comparisions which can be ANDed together.\n              // E.g.: {foo: {gte: 1, lte: 5}} =>\n              // {and: [{foo: {gte: 1}}, {foo: {lte: 5}}]}\n              keys.forEach(function (kk) {\n                var q = {};\n                q[k] = {};\n                q[k][kk] = cond[kk];\n                if (!Query.comparisonTypes[kk]) {\n                  throw new Error(kk + ' is not a valid type of comparison');\n                }\n                operand.add(_createOperation.apply(self, [q, 'and']));\n              });\n            }\n            // Simple condition (leaf-node)\n            // {foo: {ne: 'asdf'} or {foo: 1} or {foo: [1, 2, 3]}\n            else {\n              operand = _createComparison.apply(this, [cond, k]);\n            }\n          }\n\n          op.add(operand);\n        }\n        return op;\n      }\n\n    , _createComparison = function (val, key) {\n        var type\n          , keyName = key\n          , keyNameArr\n          , modelName\n          , props\n          , descr\n          , datatype\n          , opts\n          , assnTokens = [];\n\n        modelName = this.model.modelName\n        assnTokens.push(modelName)\n\n        // Walks through the associations and updates modelName\n        // until we reach the property name\n        if (keyName.indexOf('.') > -1) {\n          if(this.opts != null && this.opts.limit != null) {\n            throw new Error('It is not possible to query on an association when there is a limit clause')\n          }\n\n          keyNameArr = keyName.split('.');\n          modelName = this.model.modelName;\n\n          while(keyNameArr.length > 1) {\n            var tempAssnName = keyNameArr.shift()\n              , assn = model.getAssociation(modelName, tempAssnName)\n\n            assnTokens.push(tempAssnName)\n\n            if(!assn) {\n              throw new Error('The association \"' + tempAssnName + '\" is not a valid ' +\n                              'property on the ' + modelName + ' model.');\n            }\n            else {\n              modelName = assn.model\n            }\n          }\n\n          keyName = keyNameArr[0]\n        }\n\n        props = model.descriptionRegistry[modelName].properties;\n        descr = props[keyName];\n\n          // {id: ['foo', 'bar', 'baz']}, shorthand for Inclusion\n        if (Array.isArray(val)) {\n          type = 'in';\n        }\n        else {\n          // Single query objects -- not null, Date, Boolean\n          // e.g., {id: {'like': 'foo'}}\n          type = _extractComparisonType(val);\n          if (type) {\n            val = val[type];\n          }\n          // Simple scalar value, default to equality\n          else {\n            type = 'eql';\n          }\n        }\n\n        // FIXME: How the fuck to handle IDs?\n        // id isn't in the defined props\n        if (keyName == 'id') {\n          if (model.config.autoIncrementId) {\n            datatype = 'int';\n          }\n          else {\n            datatype = 'string';\n          }\n        }\n        else {\n          if (typeof descr === 'undefined') {\n            throw new Error('The property \"' + keyName + '\" is not a valid ' +\n                            'property on the ' + modelName + ' model.');\n          }\n\n          datatype = descr.datatype;\n        }\n\n        opts = _createComparisonOpts.apply(this, [keyName, datatype, assnTokens]);\n\n        // TODO: Validate the value for both the particular field\n        // (e.g., must be a numeric) and the type of comparison\n        // (e.g., 'IN' must be a collection, etc)\n        return comparison.create(Query.comparisonTypes[type], modelName,\n            keyName, val, datatype, opts);\n      }\n\n    , _createComparisonOpts = function (key, datatype, assnTokens) {\n        var opts = this.opts\n          , nocase = opts.nocase\n          , ret = {};\n        if (nocase && (datatype == 'string' || datatype == 'text')) {\n          if (Array.isArray(nocase)) {\n            if (nocase.some(function (o) {\n              return o == key;\n            })) {\n              ret.nocase = true;\n            }\n          }\n          else {\n            ret.nocase = true;\n          }\n        }\n\n        if(Array.isArray(assnTokens) && assnTokens.length) {\n          ret.assnTokens = assnTokens\n        }\n\n        return ret;\n      }\n\n    , _parseOpts = function (options) {\n        var opts = options || {}\n          , ret = {}\n          , val\n          , parsed\n          , validatedField\n          , validated = {}\n          , defaultDir = 'asc';\n        for (var prop in opts) {\n          val = opts[prop];\n          switch (prop) {\n            case 'sort':\n              // 'foo,bar,baz'\n              if (typeof val == 'string') {\n                val = val.split(',');\n              }\n              // ['foo', 'bar', 'baz']\n              if (Array.isArray(val)) {\n                parsed = {};\n                val.forEach(function (v) {\n                  parsed[v] = defaultDir;\n                });\n              }\n              else {\n                parsed = val;\n              }\n              // Now there's a well-formed obj, validate fields\n              for (var p in parsed) {\n                val = parsed[p].toLowerCase();\n                validatedField = this.getValidField(p);\n                if (!validatedField) {\n                  throw new Error(p + ' is not a valid field for ' +\n                      this.model.modelName);\n                }\n                if (!(val == 'asc' || val == 'desc')) {\n                  throw new Error('Sort directon for ' + p +\n                      ' field on ' + validatedField.modelName + ' must be ' +\n                      'either \"asc\" or \"desc\"');\n                }\n                if (validatedField.assnTokens.length) {\n                  var temp = validatedField.assnTokens.concat(validatedField.propertyName).join('.');\n                  validated[temp] = val;\n                }\n                else {\n                  validated[p] = val;\n                }\n              }\n              ret[prop] = validated;\n              break;\n            case 'limit':\n            case 'skip':\n              if (isNaN(val)) {\n                throw new Error('\"' + prop + '\" must be a number.');\n              }\n              ret[prop] = Number(val);\n              break;\n            default:\n              ret[prop] = val;\n          }\n        }\n        return ret;\n      }\n\n    // If there's an 'id' property in the top-level of the query\n    // object, allow non-relational stores to optimize\n    , _isByIdQuery = function (params) {\n        // Don't optimize if there is more than one property\n        if(Object.keys(params).length > 1) {\n          return null;\n        }\n        // Don't optimize if it's a list of ids\n        if (Array.isArray(params.id)) {\n          return null;\n        }\n        return params.id ? params.id : null;\n      };\n\n  this.initialize = function (model, conditionParams, opts) {\n\n    this.model = model;\n    this.byId = _isByIdQuery(conditionParams);\n    this.getValidField = _createFieldValidator.apply(this);\n    this.opts = _parseOpts.apply(this, [opts || {}]);\n    this.conditions = _createOperation.apply(this, [conditionParams]);\n    this.rawConditions = conditionParams;\n  };\n\n})();\n\nquery.Query = Query;\n\nmodule.exports = query;\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/model/lib/query/query.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":379,"column":0},"generated":{"line":379,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":380,"column":0},"generated":{"line":380,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":381,"column":0},"generated":{"line":381,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":382,"column":0},"generated":{"line":382,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":383,"column":0},"generated":{"line":383,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":384,"column":0},"generated":{"line":384,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":385,"column":0},"generated":{"line":385,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":386,"column":0},"generated":{"line":386,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":387,"column":0},"generated":{"line":387,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":388,"column":0},"generated":{"line":388,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":389,"column":0},"generated":{"line":389,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":390,"column":0},"generated":{"line":390,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":391,"column":0},"generated":{"line":391,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":392,"column":0},"generated":{"line":392,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":393,"column":0},"generated":{"line":393,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":394,"column":0},"generated":{"line":394,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":395,"column":0},"generated":{"line":395,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":396,"column":0},"generated":{"line":396,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":397,"column":0},"generated":{"line":397,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":398,"column":0},"generated":{"line":398,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":399,"column":0},"generated":{"line":399,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":400,"column":0},"generated":{"line":400,"column":0}},{"source":"../node_modules/model/lib/query/query.js","original":{"line":401,"column":0},"generated":{"line":401,"column":0}}],"sources":{"../node_modules/model/lib/query/query.js":"\nvar query = {}\n  , Query\n  , utils = require('utilities')\n  , model = require('../index')\n  , operation = require('./operation')\n  , comparison = require('./comparison');\n\nQuery = function (model, conditions, options) {\n  this.model = null;\n  this.conditions = null;\n  this.initialize.apply(this, arguments);\n};\n\nQuery.comparisonTypes = {\n  'eql': 'EqualTo'\n, 'ne': 'NotEqualTo'\n, 'in': 'Inclusion'\n, 'like': 'Like'\n, 'gt': 'GreaterThan'\n, 'lt': 'LessThan'\n, 'gte': 'GreaterThanOrEqual'\n, 'lte': 'LessThanOrEqual'\n};\n\nQuery.prototype = new (function () {\n\n  var _operationTypes = {\n        'and': true\n      , 'or': true\n      , 'not': true\n      , 'null': true\n      }\n\n    , _isQueryObject = function (obj) {\n        // Just generic query object -- not null, Date, or Boolean, or Array\n        return (obj && typeof obj == 'object' && !(obj instanceof Date) &&\n            !(obj instanceof Boolean) && !Array.isArray(obj));\n      }\n\n    , _extractComparisonType = function (obj) {\n        // Just generic query object -- not null, Date, or Boolean\n        if (_isQueryObject(obj)) {\n          // Return any valid comparison type used as key\n          for (var p in obj) {\n            if (Query.comparisonTypes[p]) {\n              return p;\n            }\n          }\n        }\n      }\n\n    , _createFieldValidator = function () {\n        var self = this\n          , baseProps = {\n              id: true\n            , createdAt: true\n            , updatedAt: true\n            };\n        return function (k) {\n          var keyName = k\n            , keyNameArr\n            , modelName\n            , reg\n            , assnTokens = [];\n\n          // Users.loginId, Teams.name\n          // Sort on nested association property\n          modelName = self.model.modelName\n\n          // Walks through the associations and updates modelName\n          // until we reach the property name\n          if (keyName.indexOf('.') > -1) {\n            if(self.opts != null && self.opts.limit != null) {\n              throw new Error('It is not possible to query on an association when there is a limit clause')\n            }\n\n            keyNameArr = keyName.split('.');\n\n            while(keyNameArr.length > 1) {\n              var tempAssnName = keyNameArr.shift()\n                , assn = model.getAssociation(modelName, tempAssnName)\n\n              assnTokens.push(tempAssnName)\n\n              if(!assn) {\n                throw new Error('The association \"' + tempAssnName + '\" is not a valid ' +\n                                'property on the ' + modelName + ' model.');\n              }\n              else {\n                modelName = assn.model\n              }\n            }\n\n            keyName = keyNameArr[0]\n          }\n\n          reg = model.descriptionRegistry[modelName].properties;\n\n          if (baseProps[keyName] || reg[keyName]) {\n            return {\n              modelName: modelName\n            , propertyName: keyName\n            , assnTokens: assnTokens\n            };\n          }\n          else {\n            return null;\n          }\n        };\n      }\n\n    , _createOperation = function (conditions, key) {\n        var self = this\n          , type = key || 'and'\n          , cond\n          , item\n          , op = operation.create(type)\n          , notOperand\n          , operand\n          , keys;\n\n        // TODO: Handle associations\n        for (var k in conditions) {\n          cond = conditions[k];\n\n          // Operation type, can contain other operations/conditions\n          if (_operationTypes[k]) {\n            // Base operation-type to create: if the type is a 'not',\n            // create a single 'and' with the same conditions to wrap\n            // in a 'not'\n            type = k == 'not' ? 'and' : k;\n\n            // If the conditions are an array, create a single 'and'\n            // op that wraps each set of conditions in each item, and\n            // add to the wrapper\n            if (Array.isArray(cond)) {\n              // Create empty wrapper\n              operand = operation.create(type);\n              cond.forEach(function (c) {\n                operand.add(_createOperation.apply(self, [c, 'and']));\n              });\n            }\n            // Simple object-literal, just create an operation\n            else {\n              operand = _createOperation.apply(this, [cond, type]);\n            }\n\n            // If this was a 'not' operation, create a wrapping 'not'\n            // to contain the single operation created\n            if (k == 'not') {\n              notOperand = operation.create(k);\n              notOperand.add(operand);\n              operand = notOperand;\n            }\n          }\n          // Condition, may be leaf-node or multiple comparisions\n          // ANDed on the same field\n          else {\n            // Exclude null, exclude array-values, only consider actual objects\n            if (_isQueryObject(cond)) {\n              keys = Object.keys(cond);\n            }\n            // If there are multiple keys, means it's multiple comparisons on\n            // the same field\n            if (keys && keys.length > 1) {\n              // Create wrapper operation\n              operand = operation.create('and');\n              // Go through each of the comparision keys in the object\n              // and create single comparisions which can be ANDed together.\n              // E.g.: {foo: {gte: 1, lte: 5}} =>\n              // {and: [{foo: {gte: 1}}, {foo: {lte: 5}}]}\n              keys.forEach(function (kk) {\n                var q = {};\n                q[k] = {};\n                q[k][kk] = cond[kk];\n                if (!Query.comparisonTypes[kk]) {\n                  throw new Error(kk + ' is not a valid type of comparison');\n                }\n                operand.add(_createOperation.apply(self, [q, 'and']));\n              });\n            }\n            // Simple condition (leaf-node)\n            // {foo: {ne: 'asdf'} or {foo: 1} or {foo: [1, 2, 3]}\n            else {\n              operand = _createComparison.apply(this, [cond, k]);\n            }\n          }\n\n          op.add(operand);\n        }\n        return op;\n      }\n\n    , _createComparison = function (val, key) {\n        var type\n          , keyName = key\n          , keyNameArr\n          , modelName\n          , props\n          , descr\n          , datatype\n          , opts\n          , assnTokens = [];\n\n        modelName = this.model.modelName\n        assnTokens.push(modelName)\n\n        // Walks through the associations and updates modelName\n        // until we reach the property name\n        if (keyName.indexOf('.') > -1) {\n          if(this.opts != null && this.opts.limit != null) {\n            throw new Error('It is not possible to query on an association when there is a limit clause')\n          }\n\n          keyNameArr = keyName.split('.');\n          modelName = this.model.modelName;\n\n          while(keyNameArr.length > 1) {\n            var tempAssnName = keyNameArr.shift()\n              , assn = model.getAssociation(modelName, tempAssnName)\n\n            assnTokens.push(tempAssnName)\n\n            if(!assn) {\n              throw new Error('The association \"' + tempAssnName + '\" is not a valid ' +\n                              'property on the ' + modelName + ' model.');\n            }\n            else {\n              modelName = assn.model\n            }\n          }\n\n          keyName = keyNameArr[0]\n        }\n\n        props = model.descriptionRegistry[modelName].properties;\n        descr = props[keyName];\n\n          // {id: ['foo', 'bar', 'baz']}, shorthand for Inclusion\n        if (Array.isArray(val)) {\n          type = 'in';\n        }\n        else {\n          // Single query objects -- not null, Date, Boolean\n          // e.g., {id: {'like': 'foo'}}\n          type = _extractComparisonType(val);\n          if (type) {\n            val = val[type];\n          }\n          // Simple scalar value, default to equality\n          else {\n            type = 'eql';\n          }\n        }\n\n        // FIXME: How the fuck to handle IDs?\n        // id isn't in the defined props\n        if (keyName == 'id') {\n          if (model.config.autoIncrementId) {\n            datatype = 'int';\n          }\n          else {\n            datatype = 'string';\n          }\n        }\n        else {\n          if (typeof descr === 'undefined') {\n            throw new Error('The property \"' + keyName + '\" is not a valid ' +\n                            'property on the ' + modelName + ' model.');\n          }\n\n          datatype = descr.datatype;\n        }\n\n        opts = _createComparisonOpts.apply(this, [keyName, datatype, assnTokens]);\n\n        // TODO: Validate the value for both the particular field\n        // (e.g., must be a numeric) and the type of comparison\n        // (e.g., 'IN' must be a collection, etc)\n        return comparison.create(Query.comparisonTypes[type], modelName,\n            keyName, val, datatype, opts);\n      }\n\n    , _createComparisonOpts = function (key, datatype, assnTokens) {\n        var opts = this.opts\n          , nocase = opts.nocase\n          , ret = {};\n        if (nocase && (datatype == 'string' || datatype == 'text')) {\n          if (Array.isArray(nocase)) {\n            if (nocase.some(function (o) {\n              return o == key;\n            })) {\n              ret.nocase = true;\n            }\n          }\n          else {\n            ret.nocase = true;\n          }\n        }\n\n        if(Array.isArray(assnTokens) && assnTokens.length) {\n          ret.assnTokens = assnTokens\n        }\n\n        return ret;\n      }\n\n    , _parseOpts = function (options) {\n        var opts = options || {}\n          , ret = {}\n          , val\n          , parsed\n          , validatedField\n          , validated = {}\n          , defaultDir = 'asc';\n        for (var prop in opts) {\n          val = opts[prop];\n          switch (prop) {\n            case 'sort':\n              // 'foo,bar,baz'\n              if (typeof val == 'string') {\n                val = val.split(',');\n              }\n              // ['foo', 'bar', 'baz']\n              if (Array.isArray(val)) {\n                parsed = {};\n                val.forEach(function (v) {\n                  parsed[v] = defaultDir;\n                });\n              }\n              else {\n                parsed = val;\n              }\n              // Now there's a well-formed obj, validate fields\n              for (var p in parsed) {\n                val = parsed[p].toLowerCase();\n                validatedField = this.getValidField(p);\n                if (!validatedField) {\n                  throw new Error(p + ' is not a valid field for ' +\n                      this.model.modelName);\n                }\n                if (!(val == 'asc' || val == 'desc')) {\n                  throw new Error('Sort directon for ' + p +\n                      ' field on ' + validatedField.modelName + ' must be ' +\n                      'either \"asc\" or \"desc\"');\n                }\n                if (validatedField.assnTokens.length) {\n                  var temp = validatedField.assnTokens.concat(validatedField.propertyName).join('.');\n                  validated[temp] = val;\n                }\n                else {\n                  validated[p] = val;\n                }\n              }\n              ret[prop] = validated;\n              break;\n            case 'limit':\n            case 'skip':\n              if (isNaN(val)) {\n                throw new Error('\"' + prop + '\" must be a number.');\n              }\n              ret[prop] = Number(val);\n              break;\n            default:\n              ret[prop] = val;\n          }\n        }\n        return ret;\n      }\n\n    // If there's an 'id' property in the top-level of the query\n    // object, allow non-relational stores to optimize\n    , _isByIdQuery = function (params) {\n        // Don't optimize if there is more than one property\n        if(Object.keys(params).length > 1) {\n          return null;\n        }\n        // Don't optimize if it's a list of ids\n        if (Array.isArray(params.id)) {\n          return null;\n        }\n        return params.id ? params.id : null;\n      };\n\n  this.initialize = function (model, conditionParams, opts) {\n\n    this.model = model;\n    this.byId = _isByIdQuery(conditionParams);\n    this.getValidField = _createFieldValidator.apply(this);\n    this.opts = _parseOpts.apply(this, [opts || {}]);\n    this.conditions = _createOperation.apply(this, [conditionParams]);\n    this.rawConditions = conditionParams;\n  };\n\n})();\n\nquery.Query = Query;\n\nmodule.exports = query;\n"},"lineCount":401}},"error":null,"hash":"60160fb9a0b2407f779825491853a39e","cacheData":{"env":{}}}